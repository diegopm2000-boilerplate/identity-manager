openapi: 3.0.0
info:
  title: Game Collector API - Clean Architecture NodeJS
  description: User Service API
  version: 0.1.0

servers:
  - url: /api

paths:

  # Healthcheck

  /healthcheck:
    get:
      summary: Healthcheck of the application
      tags:
        - Healthcheck
      operationId: healthcheck
      responses: 
        "200": 
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
              example:
                message: 'OK'

  # Users

  /users:
    post: 
      summary: Create a new user
      tags:
        - Users
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreationData"
            example:
              id: xxxxxxxxxxxxxxxxx
              loginname: userTest
              name: nameTest
              surname: surnameTest
              email: userTest@mail.com
              password: password

      responses: 
        "201": 
          description: user created OK and returned
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/UserData"
              example:
                id: xxxxxxxxxxxxxxxxx
                loginname: userTest
                name: nameTest
                surname: surnameTest
                email: userTest@mail.com
        "409": 
          description: Conflict
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
              example:
                code: 409
                message: There is a previous user with the same name in the system
    get:
      summary: Get users by filter
      tags:
        - Users
      operationId: getAllUsers
      responses: 
        "200": 
          description: Data returned
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/UserDataList"
              example:
                - id: xxxxxxxxxxxxxxxxx
                  loginname: userTest1
                  name: nameTest1
                  surname: surnameTest1
                  email: userTest1@mail.com
                - id: yyyyyyyyyyyyyyyyy
                  loginname: userTest2
                  name: nameTest2
                  surname: surnameTest2
                  email: userTest2@mail.com

  /users/{userId}:
    get:
      summary: Get the user by id
      tags:
        - Users
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: user Id
          required: true
          schema:
            type: string

      responses: 
        "200": 
          description: Data returned
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/UserData"
              example:
                id: xxxxxxxxxxxxxxxxx
                loginname: userTest
                name: nameTest
                surname: surnameTest
                email: userTest@mail.com
        "404": 
          $ref: '#/components/responses/ObjectNotFoundResponse'

    put:
      summary: Update the user by Id
      tags:
        - Users
      operationId: updateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateData"
      parameters:
        - name: userId
          in: path
          description: user Id
          required: true
          schema:
            type: string
      responses: 
        "200": 
          description: user updated OK and data returned
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/UserData"
              example:
                id: xxxxxxxxxxxxxxxxx
                loginname: userTest updated
                name: nameTest updated
                surname: surnameTest updated
                email: userTestUpdated@mail.com
        "404": 
          $ref: '#/components/responses/ObjectNotFoundResponse'

    delete:
      summary: Delete the user by Id
      tags:
        - Users
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: user Id
          required: true
          schema:
            type: string
      responses: 
        "204": 
          description: user deleted OK, no data returned
        "404": 
          $ref: '#/components/responses/ObjectNotFoundResponse'

components:

  # ##################################################################
  # RESPONSES
  # ##################################################################

  responses:

    ObjectNotFoundResponse:
      description: Object not found
      content:
        application/json:
          schema: 
            $ref: "#/components/schemas/Error"
          example:
            code: 404
            message: Object not found in the system

  # ##################################################################
  # SCHEMAS
  # ##################################################################

  schemas:

    Object:
      type: object

    Success:
      type: object
      properties:
        message:
          type: string
      required: ['message']

      additionalProperties: false

    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
      required: ['code', 'message']
      additionalProperties: false

    # Id Data

    IdData:
      type: object
      properties:
        id:
          type: string
      required:  ['id']
      additionalProperties: false

    # Users
        
    UserBasicData:
      type: object 
      properties:
        loginname:
          type: string
        name:
          type: string
        surname:
          type: string
        email:
          type: string
        password:
          type: string
      required: ['loginname', 'name', 'surname', 'email', 'password']
      additionalProperties: false

    UserData:
      allOf:
        - $ref: '#/components/schemas/IdData'
        - $ref: '#/components/schemas/UserBasicData'
    
    UserCreationData:
      allOf:
        - $ref: '#/components/schemas/UserBasicData'

    UserUpdateData:
      allOf:
        - $ref: '#/components/schemas/UserBasicData'

    UserDataList:
      type: array
      items:
        $ref: "#/components/schemas/UserData"